#!/usr/bin/env python3
# -*- coding: utf-8 -*- 
""" @package lib_fs_spectr_scripts.py
  \brief     Generowanie skryptów spektalnych na starego fs.  
  \author    Rafał Sarniak
""" 

import os
from datetime import date

def generateSpectralScripts(window):
    maker = spectralScript(window)
    if len( window.lineEdit_catalog_path.text() ) > 0:
        if len( window.comboBox_Sources.currentText() ) == 0:
            print("Generating scripts for list of sources.")
            for source in window.catalog:
                maker.getSourceData_fromList(source)
                maker.reportSourceData()
                maker.generate()
        else:
            print("Generating script for selected source from list.")
            maker.getSourceData_fromWindow()
            maker.reportSourceData()
            maker.generate()
    else:
        print("Generating script for source typed by hand.")
        maker.getSourceData_fromWindow()
        maker.reportSourceData()
        maker.generate()


class spectralScript:
    def __init__(self, window):
        self.window = window
        self.getTechnicalData()
        self.reportTechnicalData()
        self.initialAction()
        self.loCalculate()
    
    def getTechnicalData(self):
        self.epoch    = self.window.comboBox_Epoch.currentText()
        #self.receiver = self.window.comboBox_Receiver.currentText()
        try:
            self.molecule = self.window.molecules[ self.window.comboBox_Molecule.currentIndex() ]
            self.receiver = self.molecule.rt4_sys.lstrip()
            self.restfrq  = self.molecule.freq
        except AttributeError:
            print("Set molecule first!")
            return
        self.bw       = self.window.comboBox_BW.currentText()
        self.tint     = self.window.spinBox_tintegration.value()
        self.destdir  = self.window.lineEdit_destination_directory.text()
        self.calinter = self.window.spinBox_cal_scan_interv.value()
        
    def reportTechnicalData(self):
        print("General settings: ")
        print("epoch   : ", self.epoch    )
        print("molecule: ", self.molecule )
        print("receiver: ", self.receiver )
        print("restfrq : ", self.restfrq  )
        print("bw      : ", self.bw       )
        print("tint    : ", self.tint     )
        print("destdir : ", self.destdir  )
        print("calinter: ", self.calinter )
        
    def getSourceData_fromWindow(self):
        self.source_name = self.window.lineEdit_source_name.text()
        self.script_name = self.window.lineEdit_script_name.text()
        self.ra          = self.window.lineEdit_RA.text()
        self.dec         = self.window.lineEdit_DEC.text()
        self.velocity    = self.window.doubleSpinBox_velocity.value()
        self.scanpairs   = self.window.spinBox_numberofscanpairs.value()
        
    def getSourceData_fromList(self, source):
        self.source_name = source.name
        self.script_name = source.script
        self.ra          = source.ra_str() 
        self.dec         = source.dec_str()
        self.velocity    = source.v_sys
        self.scanpairs   = int(source.cycles/2)
        
    def reportSourceData(self):
        message = "Source settings: "
        message += " "  + self.source_name
        message += ", " + self.script_name
        message += ", " + self.ra         
        message += ", " + self.dec        
        message += ", " + str(self.velocity)   
        message += ", " + str(self.scanpairs)  
        print(message)
        
    def initialAction(self):
        self.datafolder = './generated_scripts/%s' % self.destdir
        if not os.path.exists(self.datafolder):
            os.makedirs(self.datafolder)   
            
    def generate(self):
        self.plik = open( self.datafolder + '/' + self.script_name + '.snp', "w" )
        self.makeHeader()  
        self.makeScriptBody()  
        self.plik.write('wakeup \n')
        self.plik.write('sched_end \n')
        self.plik.close()
        
    def makeHeader(self):
        """ Zawartość skryptu przed komendą halt. """
        today = date.today()
        self.plik.write('" Spectral script on %s \n'  % self.receiver  )
        self.plik.write('" Source: %s \n' % self.source_name           )
        self.plik.write('" Line: %s \n'   % self.molecule              )
        self.plik.write('" Scans: %d \n'  % (self.scanpairs*2)         )
        self.plik.write('" Script generated by Script_maker.\n'        )
        self.plik.write('" Date: ' + today.strftime("%Y-%m-%d") + '\n' )
        self.plik.write('" (kain@astro.umk.pl)\n'                      )
        self.plik.write('" \n')
        self.plik.write('antenna=switch,off \n')
        self.plik.write('!+1s \n')
        self.plik.write('antenna=switch,on \n')
        self.plik.write('!+1s \n')
        self.plik.write('antenna=rt4,cpoh 0 0 \n')
        self.plik.write('!+1s \n')
        self.plik.write('antenna=rt4,cor internal \n')
        self.plik.write('!+1s \n')
        self.plik.write('antenna=rt4,roh %s \n' % self.receiver.split()[0] )
        self.plik.write('!+1s \n')
        self.plik.write('source=' + self.source_name + ',' + self.ra + ',' + self.dec + ',' + self.epoch + ',neutral \n')
        if self.receiver   == "K band":
            self.plik.write("antenna=setsc," + str(self.sclof) + " \n")
            self.plik.write("!+1s \n")         
            self.plik.write("antenna=setsl," + str(self.sllof) + " \n")   
        elif self.receiver == "X band":        
            self.plik.write("antenna=setsx," + str(self.sxlof) + " \n") 
        else:                                  
            self.plik.write("antenna=setsc," + str(self.sclof) + " \n")
        self.plik.write("!+1s \n")
        if self.receiver == "L band":
            self.plik.write("lo=loa," + str(self.lo_sum) + ",lsb,lcp \n")
            self.plik.write("lo=loc," + str(self.lo_sum) + ",lsb,rcp \n")
        else:
            self.plik.write("lo=loa," + str(self.lo_sum) + ",usb,lcp \n")
            self.plik.write("lo=loc," + str(self.lo_sum) + ",usb,rcp \n")
        self.plik.write("!+1s \n")
        #self.plik.write("antenna=autoc,bbcset,1234 \n")
        self.plik.write("antenna=autoc,bbcset,1234\n")
        self.plik.write("!+1s \n")
        self.plik.write("antenna=autoc,bbcset \n")
        self.plik.write("!+1s \n")
        self.plik.write("antenna=autoc,set,%.3f" % (self.restfrq/1000000.) + "," + self.bw + ",1u,a," + str(self.velocity) + " \n")
        self.plik.write("antenna=autoc,set,%.3f" % (self.restfrq/1000000.) + "," + self.bw + ",2u,c," + str(self.velocity) + " \n")
        self.plik.write("antenna=autoc,set,%.3f" % (self.restfrq/1000000.) + "," + self.bw + ",3u,a," + str(self.velocity) + " \n")
        self.plik.write("antenna=autoc,set,%.3f" % (self.restfrq/1000000.) + "," + self.bw + ",4u,c," + str(self.velocity) + " \n")
        self.plik.write("onsource \n")
        self.plik.write("!+1s \n")
        self.plik.write("antenna=autoc," + self.getGF() + " \n")
        
        self.plik.write("halt \n")
        
    def makeScriptBody(self):
        """ Zawartość skryptu po komendzie halt. """
        freq_switch_offset = float(self.bw)/4.
        for i in range(1, self.scanpairs * 2 + 1):
            # -- Measure Tsys.
            if i % self.calinter == 1 :
                self.plik.write("aacccal \n")
                self.plik.write("!+1s \n")
            # -- Set los, with freq switching.
            if self.receiver   == "K band":
                self.plik.write("antenna=setsc," + str( self.sclof ) + " \n")
                self.plik.write("!+1s \n")    
                if i % 2 == 0:
                    self.plik.write("antenna=setsl," + str( self.sllof + freq_switch_offset ) + " \n")  
                else:
                    self.plik.write("antenna=setsl," + str( self.sllof - freq_switch_offset ) + " \n")  
            elif self.receiver == "X band":
                if i % 2 == 0:
                    self.plik.write("antenna=setsx," + str( self.sxlof + freq_switch_offset ) + " \n") 
                else:
                    self.plik.write("antenna=setsx," + str( self.sxlof - freq_switch_offset ) + " \n") 
            else:
                if i % 2 == 0:
                    self.plik.write("antenna=setsc," + str( self.sclof + freq_switch_offset ) + " \n")
                else: 
                    self.plik.write("antenna=setsc," + str( self.sclof - freq_switch_offset ) + " \n")
            # --
            self.plik.write("!+1s \n")  
            #self.plik.write("lo=loa," + str( self.lo_sum ) + ",usb,lcp \n") # <===== Chyba niepotrzebne ponownie.
            #self.plik.write("lo=loc," + str( self.lo_sum ) + ",usb,rcp \n") # <===== Chyba niepotrzebne ponownie.
            #self.plik.write("antenna=autoc,bbcset,1234 \n")    
            #self.plik.write("antenna=autoc,bbcset,6238 \n")    # <===== Chyba niepotrzebne ponownie.
            #self.plik.write("!+1s \n")
            #self.plik.write("antenna=autoc,bbcset \n")          # <===== Chyba niepotrzebne ponownie.
            #self.plik.write("!+1s \n")
            self.plik.write("antenna=autoc,start \n")
            self.plik.write('" Integration on source \n')
            self.plik.write('" Writing data to file ' + self.source_name + '_' + 
                            str( '{:04}'.format(i) ) + '.DAT \n' )
            self.plik.write("!+" + str( self.tint ) + "s \n")
            self.plik.write("antenna=autoc,save," + self.destdir + "/" + self.source_name + "_" + 
                            str( '{:04}'.format(i) ) + ".DAT \n" )
            self.plik.write("!+2s \n")
            
    
    def getGF(self):
        """ Zapytać AKę/PW od czego skrótem jest GF. """
        if   float(self.bw) == 0.5 : return 'g0x1'
        elif float(self.bw) == 1   : return 'g0x3'
        elif float(self.bw) == 2   : return 'g0x5'
        elif float(self.bw) == 4   : return 'g0x7'
        elif float(self.bw) == 8   : return 'g0x9'
        elif float(self.bw) == 16  : return 'g0xB'
    
    def loCalculate(self):
        """
           Metoda na podstawie kodu Pawła Wolaka. Z tego co mówił, wartości syntezera wyznaczone empirycznie.
           W jego kodzie BBCIF_and_LOSC jest nazwana C1 i jak rozumiem jest użyte dla wizualizacji tej wartości.
        """
        bbcIF   = 710.
        restfrq = self.restfrq / 1e6 # in MHz
        if   self.receiver == "K band":
            if restfrq >= 20000. and restfrq < 23000.:
                BBCIFandLOSC = 5075
            elif restfrq >= 23000. and restfrq < 25130.:
                BBCIFandLOSC = 5200
            elif restfrq >= 25130. and restfrq < 25300.:
                BBCIFandLOSC = 5300
            self.sclof   = BBCIFandLOSC - bbcIF
            self.sllof   = restfrq - BBCIFandLOSC
            self.lo_sum  = self.sclof + self.sllof
            #
        elif self.receiver == "X band":
            self.sxlof  = 11458.
            self.lo_sum = self.sxlof
        else:
            # W przypadku pozostałych odbiorników:
            if restfrq >= 6800 and restfrq < 7000:
                self.sclof = 6130
            elif restfrq >= 6500 and restfrq < 6800:
                self.sclof = 5900
            elif restfrq >= 6300 and restfrq < 6500:
                self.sclof = 5730
            elif restfrq >= 6200 and restfrq < 6300:
                self.sclof = 5550
            elif restfrq >= 6100 and restfrq < 6200:
                self.sclof = 5400
            elif restfrq >= 5800 and restfrq < 6100:
                self.sclof = 5300
            elif restfrq >= 4000 and restfrq < 5500:
                self.sclof = 3950
            elif restfrq >= 1700 and restfrq < 1800:
                self.sclof = 2310
            elif restfrq >= 1500 and restfrq < 1700:
                self.sclof = 2250
            elif restfrq < 1500:
                self.sclof = 2100
            else:
                print("No synteser presets!")
            self.lo_sum = self.sclof
            
